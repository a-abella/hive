name: hive
help: A single-pane toolbox for Docker Swarm clusters
version: 0.0.1

dependencies: [docker, jq, ssh]

environment_variables:
- name: DEBUG
  help: Set 1 for basic, >1 for verbose
  default: "0"

commands:
- name: config
  help: Manage hive settings and behaviors
  footer: |
    Settings are stored and sourced from local settings files in the following
    order of precedence:
    - \$PWD/.hive-settings.ini
    - \${hive_location}/.hive-settings.ini
    - \$HOME/.hive-settings.ini
  commands:
  - name: init
    help: Run the initial setup prompts retaining current settings as defaults
    flags:
    - long: --reset-clusters
      help: Allows cluster settings to be overridden
  - name: reload
    help: Read settings and execute necessary local configurations
  - name: show
    help: print saved settings and metadata
  - name: cluster
    help: Manage cluster metadata used by hive
    commands:
    - name: add
      help: Add a cluster
      args:
      - name: NAME
        help: |
          A unique identifying name referring to a Docker Swarm cluster, such as
          "dev", "prod", "ci", etc
        required: true
        validate: context_name
      - name: MANAGER
        help: |
          A hostname for a Swarm Manager node within the cluster; further
          managers can be autodiscovered with 'hive cluster discover'
        required: true
        validate: context_host
      flags:
      - long: --description
        short: -d
        help: Optional description of the cluster
    - name: discover
      help: Discover neighbor managers
      flags:
      - long: --filter
        short: -f
        arg: FILTER
        help: |
          Filter output based on conditions provided, equivalent to 'docker node
          ls --filter'; a filter of 'role=manager' is implicitly applied
    - name: ls
      help: List clusters
    - name: node-prune
      help: Remove saved manager nodes absent from the current Swarm node list
      flags:
      - long: --all
        short: -a
        help: |
          Remove all manager nodes from the saved cluster data; WARNING-- you
          will need to re-populate the saved cluster data with at least one
          manager via 'hive config init' or 'hive config cluster update
          --add-node'
    - name: show
      help: Print current cluster setting information
      flags:
      - long: --field
        short: -f
        arg: FIELD
        allowed: [all, name, description, managers]
        default: name   
    - name: rm
      help: Remove a cluster from hive management
      footer: Removing the current cluster will implicitly call 'hive disconnect' before removal
      args:
      - name: CLUSTER
        help: Cluster name
        required: true
    - name: update
      help: Modify cluster attributes
      args:
      - name: NAME
        help: The cluster to update, defaults to the current cluster if none is provided
        required: false
      flags:
      - long: --name
        short: -n
        help: New name for the cluster
      - long: --description
        short: -d
        help: New description of the cluster
      - long: --add-node
        help: |
          A Swarm manager hostname to add to the cluster data; WARNING-- this
          will NOT prevent you from adding manager nodes from multiple Swarm
          clusters. For safety instead use 'hive config cluster discover' with a
          '--filter name='
      - long: --rm-node
        help: |
          A Swarm manager hostname to remove from the cluster data; WARNING-- if
          you remove the last/only manager you will need to re-populate the
          cluster data with at least one manager via 'hive config init' or 'hive
          config cluster update --add-node'
    - name: use
      help: Set the current hive cluster
      args:
      - name: CLUSTER
        help: Cluster name
        required: true
  - name: prompt
    help: Configure PS1 prompt injection
    commands:
      - name: disable
        help: Turn off prompt injection
      - name: enable
        help: Turn on prompt injection
      - name: update
        help: Set prompt template
        footer: |
          Prompt template strings may use special template variables in the
          form {VARIABLE}
          
          The following template variables are available:
          - {CLUSTER}     The current hive cluster name
          - {MANAGER}     The currently selected cluster manager receiving
                            Swarm commands
                            
          Additionally, template variables may be piped to a shell command for
            modification. For example:
          - {MANAGER|cut -d'.' -f1}
          - {CLUSTER|tr A-Z a-z}
          
          Curly braces within a template variable body must be escaped
          
          The prompt can additionally use caret (^) and dollar-sign ($) characters
            with special meaning:
          - ^   A caret as the FIRST character of a template indicates that the
                  prompt will be PREPENDED to the PS1 environment variable
          - $   A dollar-sign as the LAST character of a template indicates that the
                  prompt will be APPENDED to the PS1 environment variable
          
          The default template is: "^({CLUSTER}) "
        args:
        - name: TEMPLATE
          help: Template string to apply
          required: true
          validate: parse_prompt
  - name: ssh
    help: Manage ssh connection arguments, multiplexing, and host keys
    commands:
    - name: credential
      help: Manage username and ssh private key file path for DOCKER_HOSTs
      commands:
      - name: show
        help: Display currently configured ssh credential info
      - name: update
        help: Update ssh credential info
        footer: |
          All hive ssh connections will use the credentials configured here.
          Individual credentials per cluster are not supported. If you need
          per-cluster credentials you can maintain a settings file per cluster.
          You can specify alternate settings file paths with the HIVE_SETTINGS
          environment variable
        flags:
        - long: --user
          short: -u
          arg: USER
          help: The ssh username to be used in DOCKER_HOST ssh sessions (default current shell user)
          default: \$USER
        - long: --identity-file
          short: -i
          arg: FILE
          help: |
            The path to the private key file for the given ssh user (default ssh
            client private key search behavior is used if no identity-file is
            supplied)
        - long: --ssh-config
          short: -s
          arg: FILE
          default: \$HOME/.ssh/config
          help: |
            The path to the ssh_config file for the given ssh user
        - long: --reload
          help: Trigger a 'hive config reload' to apply updated ssh information to ssh multiplexing configs
    - name: hostkeys
      help: Manage ssh host-keys for current cluster hosts
      commands:
      - name: expire
        help: Remove all cluster host-keys
      - name: fetch
        help: Retrieve all cluster host-keys
      - name: keyfile
        help: Interact with the hive-managed ssh hostkey keyfile
        footer: Default keyfile is located at \$HOME/.ssh/_hive_known_hosts
        commands:
        - name: del
          help: Delete a keyfile entry by name
          args:
          - name: HOST
            help: A hostname or IP
        - name: show
          help: Display keyfile information
        - name: update
          help: Change the hive-managed keyfile location
          footer: Default keyfile is located at \$HOME/.ssh/_hive_known_hosts
          flags:
          - long: --path
            short: -p
            arg: PATH
            help: Path to new keyfile location
            validate: file_exists
          - long: --hash-hosts
            arg: BOOL
            help: Sets ssh HashKnownHosts value, triggers 'hive config ssh hostkeys refresh'
            allowed: ["true", "false"]
      - name: refresh
        help: Alias for 'hive config ssh hostkeys expire && hive config ssh hostkeys fetch'
    - name: multiplex
      help: Manage connection mulitplexing for hive DOCKER_HOST ssh sessions
      commands:
      - name: disable
        help: Removes injected ssh multiplexing from saved ssh_config location
      - name: enable
        help: Inject ssh multiplexing to saved ssh_config location for hive DOCKER_HOSTs
      - name: update
        help: Update ssh_config multiplexing settings
        footer: |
          Reference 'man ssh_config' for further information on ControlMaster
          configurations and options
        flags:
        - long: --ssh-config
          short: -s
          arg: PATH
          help: Path to ssh config file for hive user, defaults to value set in 'hive config ssh credential'
          validate: file_exists
        - long: --control-path
          arg: PATH
          help: Path and filename template string for ssh ControlMaster ControlPath socket files
          default: \$HOME/.ssh/_hive_%r@%h.sock
        - long: --control-persist
          arg: DURATION
          help: Duration to retain multiplexed ssh connection sockets
          default: 60m
        - long: --server-alive-interval
          arg: INT
          help: Interval duration in seconds to send KeepAlive packets over the active ssh session
          default: "300"
          validate: integer
- name: connect
  help: Restore cluster, prompt, and sessions
- name: disconnect
  help: Unset current cluster and prompt, and close sessions
- name: docker
  help: Docker management commands
  commands:
  - name: bounce
    help: Rolling restart one or more services by calling 'docker service update --force'
    args:
      - name: SERVICE
        help: A service name or ID
        repeatable: true
        required: true
    flags:
    - long: --container-parallel
      help: |
        Restart all replica containers of each service simultaneously. Will
        disrupt service availability unless the service is configured with
        '--update-order "start-first"'
  - name: context
    help: Manage 'docker context' contexts
    commands:
    - name: discover
      help: |
        Automatically create missing local 'docker context' entries from
        discovered and optionally filtered 'docker node ls' hosts
      footer: |
        Context template strings may use special template variables in the form {VARIABLE}
        
        The following context template variables are available:
        - {CLUSTER}    The current hive cluster
        - {HOSTNAME}   The discovered docker node hostname
        
        Additionally, template variables may be piped to a shell command for
        modification. For example:
        - {HOSTNAME|cut -d'.' -f1}
        - {CLUSTER|tr A-Z a-z}
        
        Curly braces within a template variable body must be escaped
        
        The default template is:
        - {CLUSTER}_{HOSTNAME|cut -d'.' -f1}
        
        Use 'docker context ls' to list docker contexts
      flags:
      - long: --filter
        short: -f
        arg: FILTER
        default: "membership=pending"
        help: Filter output based on conditions provided, equivalent to 'docker node ls --filter'
      - long: --ctx-name-template
        help: A template to automatically generate context names instead of prompting individually
        arg: TEMPLATE
        default: "{CLUSTER}_{HOSTNAME|cut -d'.' -f1}"
      - long: --ctx-docker-host-template
        help: A template to automatically generate context DOCKER_HOST values instead of prompting individually
        arg: TEMPLATE
        default: "ssh://{HOSTNAME}"
    - name: prune
      help: "Remove dangling 'docker context' contexts created by hive (dangling: contexts with absent cluster nodes)"
      flags:
      - long: --all
        short: -a
        help: Remove all contexts created by hive
  - name: exec
    help: Run a command in a running container located somewhere in the Swarm
    footer: |
      By default executes command equivalent to "docker exec -i -t CONTAINER COMMAND"
      
      Makes a best-effort to resolve SERVICE to a child CONTAINER. If SERVICE
      has multiple child containers, the list of containers will be presented
      with a selection prompt
    args:
    - name: SERVICE
      help: A service name or id to run the command against
      required: true
    - name: COMMAND
      help: The command to pass to the target container or service
      required: true
    flags:
    - long: --extra-opts
      short: -o
      arg: OPTS
      help: A single string of extra command line flags corresponding to the available flags for 'docker exec'. The flags '-i -t' are always implicitly applied.
  - name: host-exec
    help: Run a command on the host running a target container
    footer: |
      Executes command equivalent to 'ssh -t CONTAINER_HOST bash -l -c "COMMAND"'
      
      Makes a best-effort to resolve SERVICE to a child container to determine
      CONTAINER_HOST. If SERVICE has multiple child containers, the list of
      containers and hosts will be presented with a selection prompt
    args:
    - name: SERVICE
      help: A service name or id to resolve a CONTAINER_HOST for
      required: true
    - name: COMMAND
      help: The command to pass to the target host
      required: true
  - name: image
    help: Manage images
    commands:
    - name: ls
      help: List images across all nodes
      flags:
      - long: --filter
        short: -f
        arg: FILTER
        default: "."
        help: Filter output based on conditions provided, equivalent to 'docker image ls --filter'
      - long: --format
        arg: FORMAT
        help: Pretty-print containers using a Go template, equivalent to 'docker image ls --format'
    - name: inspect
      help: Alias for 'hive inspect --type image'
      args:
      - name: IMAGE
        help: An image name/tag or ID
        required: true
      flags:
      - long: --format
        short: -f
        arg: FORMAT
        help: Pretty-print containers using a Go template, equivalent to 'docker image inspect --format'
  - name: images
    help: Alias for 'hive image ls'
    flags:
    - long: --filter
      short: -f
      arg: FILTER
      default: "."
      help: Filter output based on conditions provided, equivalent to 'docker image ls --filter'
    - long: --format
      arg: FORMAT
      help: Pretty-print containers using a Go template, equivalent to 'docker image ls --format'
  - name: inspect
    help: Return low-level information on Docker objects
    footer: |
      Searches all objects and across all nodes by default. Different types of
      objects can have the same name, and same types of objects can have the
      same name across different nodes, making lookups without --type and --node
      restrictions potentially ambiguous
    args:
    - name: OBJECT
      help: A docker object such as a service name, container ID, node hostname, image , etc
      required: true
    flags:
    - long: --format
      arg: FORMAT
      help: Pretty-print containers using a Go template, equivalent to 'docker inspect --format'
    - long: --type
      short: -t
      arg: TYPE
      help: Restricts the lookup to a certain object type
      allowed: [config, container, image, network, node, secret, service, stack, volume, task]
      default: auto
    - long: --node
      short: -n
      arg: NODE
      help: Restricts the lookup to objects present on a given NODE, where NODE matches a 'docker node ls' hostname
  - name: logs
    help: Get multiple 'docker service logs' streams in parallel
    footer: Executes command equivalent to 'parallel -P# -i docker service logs --tail=TAIL [-f] {} <<< SERVICES'
    args:
    - name: SERVICE
      help: One or more exact service names
      repeatable: true
      required: true
    flags:
    - long: --follow
      short: -f
      help: Follow log output
    - long: --tail
      short: -n
      arg: TAIL
      help: Number of lines to show from the end of each log stream
      default: "100"
      validate: integer
    - long: --max-streams
      short: -m
      arg: MAX_STREAMS
      help: Max allowed number of parallel streams, to protect the Docker daemon from excess throughput
      default: "6"
      validate: integer
    - long: --extra-opts
      short: -o
      arg: OPTS
      help: A single string of extra command line flags corresponding to the available flags for 'docker service logs'
  - name: ps
    help: List containers across all nodes
    flags:
    - long: --all
      short: -a
      help: Include stopped containers
    - long: --filter
      short: -f
      arg: FILTER
      default: "."
      help: Filter output based on conditions provided, equivalent to 'docker ps --filter'
    - long: --format
      arg: FORMAT
      help: Pretty-print containers using a Go template, equivalent to 'docker ps --format'
    - long: --output
      arg: OUTPUT
      allowed: [compact, json, table]
      default: table
    - long: --extra-opts
      short: -o
      arg: OPTS
      help: A single string of extra command line flags corresponding to the available flags for 'docker ps'
  - name: restart-hack
    help: Restart a container without Swarm scheduler interference
    footer: |
      A regular 'docker restart' of a Swarm-managed container may result in a
      duplicate container being spawned by the scheduler if it is recognized as
      a container failure
      
      This command implements a workaround by pausing Swarm scheduling on the
      container's host node, restarting the container, then resuming scheduling
      
      This command takes the following equivalent actions:
      
      - docker node update --availability=pause NODE
      - DOCKER_HOST=ssh://NODE docker restart CONTAINER
      - sleep 5
      - docker node update --availability=active NODE
    args:
    - name: CONTAINER
      help: |
        A container name or ID. Will NOT accept a service name or ID. Will
        attempt to resolve the container host, but in the case of ambiguous
        container name command will exit with error
      required: true
    flags:
    - long: --node
      short: -n
      arg: NODE
      help: |
        Restricts the container lookup to container present on given NODE, where
        NODE matches a 'docker node ls' hostname  
